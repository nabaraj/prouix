/* To use any maps provided below you just have to use the mixin name by sending that parameter
For ex: For z-index of 300 we will use get-zindex(z3)*/

//List of all z-indexes to get eagle view
$zindex-list: (
    z0: 0,
    z1: 100,
    z2: 200,
    z3: 300,
    z4: 400,
    z5: 500,
    default: auto,
);

/*Z-index using the list of z-indexes*/
@function get-zindex($key) {
    @if map-has-key($zindex-list, $key) {
        @return map-get($zindex-list, $key);
    }
    @else {
        @return auto;
    }
}

/*All colors will come here */
$color-list: (
    'primary': (
        'base': #3F51B5,
        'light': #9FA8DA,
        'dark': #303F9F
    ),
    'accent': (
        'base': #f44336,
        'light': #ef9a9a,
        'dark': #d32f2f,
        'fallback':'FFFFFF'
    ),
    'secondary': (
        'base': #f44336,
        'light': #7b1a2d,
        'dark': #51111e
    ),
    'dark': (
        'base': #212121,
        'secondary': #666666,
        'disabled': #111111,
        'dividers': #E1E1E1
    ),
    'light': (
        'base': #e9e9e9,
        'secondary': #888888,
        'disabled': #424242,
        'dividers': #1E1E1E
    )
);

/*Use it like this get-color('primary', 'light')*/
@function get-color($key, $variant:'base') {
    @if map-has-key($color-list, $key) {
        $color-group : map-get($color-list, $key);
        @if map-has-key($color-group, $variant) {
            @return map-get($color-group, $variant);
        }
        @else {
            @if map-has-key($color-group, 'base') {
                @return map-get($color-group, 'base');
            }
            @else {
                @return #000000;
            }
        }
    }
    @else {
        @return #000000;
    }
}

/*Opacity including older browser support*/
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

/* Border radius keeping all browsers support */
@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

/*Absolute position css by sending 4 attributes, default being auto*/
@mixin abs-pos ($top: auto, $right: auto, $bottom: auto, $left: auto) {
  top: $top;
  right: $right;
  bottom: $bottom;
  left: $left;
  position: absolute;
}

/* 
* @include triangle within a pseudo element and add positioning properties (ie. top, left)
* $direction: up, down, left, right
*/
@mixin triangle($direction, $size: 6px, $color: get-color("primary")){
    content: '';
    display: block;
    position: absolute;
    height: 0; width: 0;
    @if ($direction == 'up'){
        border-bottom: $size solid $color;
        border-left: 1/2*$size solid transparent;
        border-right: 1/2*$size solid transparent;
    }
    @else if ($direction == 'down'){
        border-top: $size solid $color;
        border-left: 1/2*$size solid transparent;
        border-right: 1/2*$size solid transparent;
    }
    @else if ($direction == 'left'){
        border-top: 1/2*$size solid transparent;
        border-bottom: 1/2*$size solid transparent;
        border-right: $size solid $color;
    }
    @else if ($direction == 'right'){
        border-top: 1/2*$size solid transparent;
        border-bottom: 1/2*$size solid transparent;
        border-left: $size solid $color;
    }
}

/* Truncate by giving clip,ellipsis */
@mixin truncate-text($overflow: ellipsis){
  overflow: hidden;
  white-space: nowrap;
  text-overflow: $overflow; // values are: clip, ellipsis, or a string
}

// define variables for spacings
// ==========================================================================
$max-width: 100% !global;
$gutterwidth: gutrwdthpx;
$gutterside:$gutterwidth/2;
$mobilegutter: $gutterwidth/4;

$max-width: contwidthpx ;
$min-width: 320px;

// define breakpoints
// ==========================================================================

$tablet-width: tabbrkpntpx;
$desktop-width: deskbrkpntpx;
$lgdesktop-width: lgdskbrkpntpx;

/*Mobile, tablet, desktop media queries Use by just saying @include and adding its styles inside*/
@mixin mobile {
  @media (max-width: #{$tablet-width -1px}) {
    @content;
  }
}

@mixin tablet {
  @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {
    @content;
  }
}

@mixin desktop {
  @media (min-width: #{$desktop-width})  and (max-width: #{$lgdesktop-width - 1px}) {
    @content;
  }
}

@mixin lgdesktop {
  @media (min-width: #{$lgdesktop-width}) {
    @content;
  }
}
/* To use media queries we just have to say @include tablet{font-size:14px} */

/*******************ANIMATION MIXIN****************************/
@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}
/*******************ANIMATION MIXIN****************************/
/*******************TRANSITION MIXIN****************************/

@mixin transition($args...) {
  -webkit-transition: $args;
  -moz-transition: $args;
  -ms-transition: $args;
  -o-transition: $args;
  transition: $args;
}
/*******************TRANSITION MIXIN****************************/

%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}

//includes fonts sass from the fonts folder and then we assign them to variables
//Fonts
$font-primary: 'Arial';
$font-project: 'San-serif';
$font-oswald-bold: 'Oswald';
$font-random: 'Random';
//Standard fonts like these will be added for generalisation
$font-family-sans-serif:  "Helvetica Neue", Helvetica, Arial, sans-serif !default;



//## Font, line-height, and color for body text, headings, and more.

$font-family-sans-serif:  "Helvetica Neue", Helvetica, Arial, sans-serif !default;
$font-family-serif:       Georgia, "Times New Roman", Times, serif !default;
// Default monospace fonts for `<code>`, `<kbd>`, and `<pre>`.
$font-family-monospace:   Menlo, Monaco, Consolas, "Courier New", monospace !default;
$font-family-base:        $font-universl-roman !default; 

$font-size-base:          15px !default;
$font-size-large:         ceil(($font-size-base * 1.25)) !default; // ~18px
$font-size-small:         ceil(($font-size-base * 0.85)) !default; // ~12px

$font-size-h1:            floor(($font-size-base * 2.6)) !default; // ~36px
$font-size-h2:            floor(($font-size-base * 2.15)) !default; // ~30px
$font-size-h3:            ceil(($font-size-base * 1.7)) !default; // ~24px
$font-size-h4:            ceil(($font-size-base * 1.25)) !default; // ~18px
$font-size-h5:            $font-size-base !default;
$font-size-h6:            ceil(($font-size-base * 0.85)) !default; // ~12px

// Unit-less `line-height` for use in components like buttons.
$line-height-base:        1.35 !default; // 20/14
// Computed "line-height" (`font-size` * `line-height`) for use with `margin`, `padding`, etc.
$line-height-computed:    floor(($font-size-base * $line-height-base)) !default; // ~20px

// By default, this inherits from the `<body>`.
$headings-font-family:    inherit !default;
$headings-font-weight:    500 !default;
$headings-line-height:    1.1 !default;
$headings-color:          inherit !default;

/*Button colurs used across site can be defined*/
/*$btn-default-color:              #333 !default;
$btn-default-bg:                 #fff !default;
$btn-default-border:             #ccc !default;*/

//-- Z-index master list
//
// Warning: Avoid customizing these values. They're used for a bird's eye view
// of components dependent on the z-axis and are designed to all work together.
//
// Note: These variables are not generated into the Customizer.

$zindex-navbar:            1000 !default;
$zindex-dropdown:          1000 !default;
$zindex-popover:           1060 !default;
$zindex-tooltip:           1070 !default;
$zindex-navbar-fixed:      1030 !default;
$zindex-modal-background:  1040 !default;
$zindex-modal:             1050 !default;

//Setting container width to all view ports if required
$container-tablet: 700px;
$container-desktop: 980px;
$container-mobile: 400px;